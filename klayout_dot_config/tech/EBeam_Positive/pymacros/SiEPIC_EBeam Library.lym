<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015-2017

This Python file implements a library called "SiEPIC_EBeam", consisting of mature components that have Layouts and Compact Models for circuit simulations:
 - Fixed GDS cell components: imported from SiEPIC-EBeam.gds
 - PCells:
    - ebeam_dc_halfring_straight
    - ebeam_bragg_te1550: waveguide Bragg grating 
		- ebeam_taper_te1550: Waveguide Taper
		- Waveguide_bump
		- Waveguide_SBend
		- Waveguide_Bend 

NOTE: after changing the code, the macro needs to be rerun to install the new
implementation. The macro is also set to "auto run" to install the PCell 
when KLayout is run.

Crash warning:
 https://www.klayout.de/forum/comments.php?DiscussionID=734&amp;page=1#Item_13
 This library has nested PCells. Running this macro with a layout open may
 cause it to crash. Close the layout first before running.

Version history:

Lukas Chrostowski           2015/11/05 - 2015/11/10
 - Double-bus ring resonator
 - waveguide bends
 - PCell parameter functions
 - polygon text
 - PCell calling another PCell - TestStruct_DoubleBus_Ring

Lukas Chrostowski           2015/11/14
 - fix for rounding error in "DoubleBus_Ring"

Lukas Chrostowski           2015/11/15
 - fix for Python 3.4: print("xxx")
 
Lukas Chrostowski           2015/11/17
 - update "layout_waveguide_rel" to use the calculated points_per_circle(radius)

Lukas Chrostowski           2015/11/xx
 - Waveguide based on bends, straight waveguide.

Lukas Chrostowski           2015/12/3
 - Bragg grating

Lukas Chrostowski           2016/01/17
 - Taper, matching EBeam CML component
 
Lukas Chrostowski           2016/01/20
 - (sinusoidal) Bragg grating
 
Lukas Chrostowski           2016/05/27
 - SWG_waveguide
 - SWG_to_strip_waveguide

S. Preble                   2016/08/26
 - Double Bus Ring Pin's shifted - text now is in the middle of the pin path

Lukas Chrostowski           2016/11/06
 - waveguide bump, to provide a tiny path length increase

Lukas Chrostowski           2017/02/14
 - renaming "SiEPIC" PCells library to "SiEPIC-EBeam PCells", update for Waveguide_Route
 - code simplifications: Box -&gt; Box

Lukas Chrostowski           2017/03/08
 - S-Bend - Waveguide_SBend

Lukas Chrostowski           2017/03/18
 - ebeam_dc_halfring_straight, with TE/TM support.  Zeqin Lu adding CML for this component. 
 
Lukas Chrostowski 2017/12/16
 - compatibility with KLayout 0.25 and SiEPIC-Tools
 
todo:
replace:     
 layout_arc_wg_dbu(self.cell, Layerm1N, x0,y0, r_m1_in, w_m1_in, angle_min_doping, angle_max_doping)
with:
 self.cell.shapes(Layerm1N).insert(Polygon(arc(w_m1_in, angle_min_doping, angle_max_doping) + [Point(0, 0)]).transformed(t))


"""
import math
from SiEPIC.utils import get_technology, get_technology_by_name

# Import KLayout Python API methods:
# Box, Point, Polygon, Text, Trans, LayerInfo, etc
from pya import *



class Waveguide(PCellDeclarationHelper):

  def __init__(self):
    # Important: initialize the super class
    super(Waveguide, self).__init__()
    # declare the parameters
    TECHNOLOGY = get_technology_by_name('EBeam_Positive')
    self.param("path", self.TypeShape, "Path", default = DPath([DPoint(0,0), DPoint(10,0), DPoint(10,10)], 0.5))
    self.param("radius", self.TypeDouble, "Radius", default = 5)
    self.param("width", self.TypeDouble, "Width", default = 0.5)
    self.param("adiab", self.TypeBoolean, "Adiabatic", default = False)
    self.param("bezier", self.TypeDouble, "Bezier Parameter", default = 0.35)
    self.param("layers", self.TypeList, "Layers", default = ['Waveguide'])
    self.param("widths", self.TypeList, "Widths", default =  [0.5])
    self.param("offsets", self.TypeList, "Offsets", default = [0])
    
  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Waveguide_%s" % self.path
  
  def coerce_parameters_impl(self):
    from SiEPIC.extend import to_itype
    print("EBeam.Waveguide coerce parameters")
    
    TECHNOLOGY = get_technology_by_name('EBeam')
    dbu = self.layout.dbu
    wg_width = to_itype(self.width,dbu)
    for lr in range(0, len(self.layers)):
      layer = self.layout.layer(TECHNOLOGY[self.layers[lr]])
      width = to_itype(self.widths[lr],dbu)
      # check to make sure that the waveguide with parameters are consistent in both places
      if self.layout.layer(TECHNOLOGY['Waveguide']) == layer:
        if width != wg_width:
          self.widths[lr] = self.width
      # check to make sure that the DevRec is bigger than the waveguide width
      if self.layout.layer(TECHNOLOGY['DevRec']) == layer:
        if width &lt; wg_width:
          self.widths[lr] = self.width*2
          
  def can_create_from_shape_impl(self):
    return self.shape.is_path()

  def transformation_from_shape_impl(self):
    return Trans(Trans.R0,0,0)

  def parameters_from_shape_impl(self):
    self.path = self.shape.dpath
        
  def produce_impl(self):

    from SiEPIC.utils import arc_xy, arc_bezier, angle_vector, angle_b_vectors, inner_angle_b_vectors, translate_from_normal
    from math import cos, sin, pi, sqrt
    import pya
    from SiEPIC.extend import to_itype
    
    print("EBeam.Waveguide")
    
    TECHNOLOGY = get_technology_by_name('EBeam')
    
    dbu = self.layout.dbu
    wg_width = to_itype(self.width,dbu)
    path = self.path.to_itype(dbu)

    if not (len(self.layers)==len(self.widths) and len(self.layers)==len(self.offsets) and len(self.offsets)==len(self.widths)):
      raise Exception("There must be an equal number of layers, widths and offsets")
    path.unique_points()
    turn=0
    for lr in range(0, len(self.layers)):
      layer = self.layout.layer(TECHNOLOGY[self.layers[lr]])
      
      width = to_itype(self.widths[lr],dbu)
      offset = to_itype(self.offsets[lr],dbu)

      pts = path.get_points()
      wg_pts = [pts[0]]
      for i in range(1,len(pts)-1):
        turn = ((angle_b_vectors(pts[i]-pts[i-1],pts[i+1]-pts[i])+90)%360-90)/90
        dis1 = pts[i].distance(pts[i-1])
        dis2 = pts[i].distance(pts[i+1])
        angle = angle_vector(pts[i]-pts[i-1])/90
        pt_radius = to_itype(self.radius,dbu)
        # determine the radius, based on how much space is available
        if len(pts)==3:
          pt_radius = min (dis1, dis2, pt_radius)
        else:
          if i==1:
            if dis1 &lt;= pt_radius:
              pt_radius = dis1
          elif dis1 &lt; 2*pt_radius:
            pt_radius = dis1/2
          if i==len(pts)-2:
            if dis2 &lt;= pt_radius:
              pt_radius = dis2
          elif dis2 &lt; 2*pt_radius:
            pt_radius = dis2/2
        # waveguide bends:
        if(self.adiab):
          wg_pts += Path(arc_bezier(pt_radius, 270, 270 + inner_angle_b_vectors(pts[i-1]-pts[i], pts[i+1]-pts[i]), self.bezier, DevRec='DevRec' in self.layers[lr]), 0).transformed(Trans(angle, turn &lt; 0, pts[i])).get_points()
        else:
          wg_pts += Path(arc_xy(-pt_radius, pt_radius, pt_radius, 270, 270 + inner_angle_b_vectors(pts[i-1]-pts[i], pts[i+1]-pts[i]),DevRec='DevRec' in self.layers[lr]), 0).transformed(Trans(angle, turn &lt; 0, pts[i])).get_points()
      wg_pts += [pts[-1]]
      wg_pts = pya.Path(wg_pts, 0).unique_points().get_points()
      wg_polygon = Polygon(translate_from_normal(wg_pts, width/2 + (offset if turn &gt; 0 else - offset))+translate_from_normal(wg_pts, -width/2 + (offset if turn &gt; 0 else - offset))[::-1])
      self.cell.shapes(layer).insert(wg_polygon)
      
      if self.layout.layer(TECHNOLOGY['Waveguide']) == layer:
        waveguide_length = wg_polygon.area() / self.width * dbu**2

    pts = path.get_points()
    LayerPinRecN = self.layout.layer(TECHNOLOGY['PinRec'])
    
    t1 = Trans(angle_vector(pts[0]-pts[1])/90, False, pts[0])
    self.cell.shapes(LayerPinRecN).insert(Path([Point(-50, 0), Point(50, 0)], self.width/dbu).transformed(t1))
    self.cell.shapes(LayerPinRecN).insert(Text("pin1", t1, 0.3/dbu, -1))
    
    t = Trans(angle_vector(pts[-1]-pts[-2])/90, False, pts[-1])
    self.cell.shapes(LayerPinRecN).insert(Path([Point(-50, 0), Point(50, 0)], self.width/dbu).transformed(t))
    self.cell.shapes(LayerPinRecN).insert(Text("pin2", t, 0.3/dbu, -1))

    LayerDevRecN = self.layout.layer(TECHNOLOGY['DevRec'])

    # Compact model information
    angle_vec = angle_vector(pts[0]-pts[1])/90
    halign = 0 # left
    angle=0
    pt2=pts[0]
    pt3=pts[0]
    if angle_vec == 0: # horizontal
      halign = 2 # right
      angle=0
      pt2=pts[0] + Point(0, wg_width)
      pt3=pts[0] + Point(0, -wg_width)
    if angle_vec == 2: # horizontal
      halign = 0 # left
      angle = 0
      pt2=pts[0] + Point(0, wg_width)
      pt3=pts[0] + Point(0, -wg_width)
    if angle_vec == 1: # vertical
      halign = 2 # right
      angle = 1
      pt2=pts[0] + Point(wg_width,0)
      pt3=pts[0] + Point(-wg_width,0)
    if angle_vec == -1: # vertical
      halign = 0 # left
      angle = 1
      pt2=pts[0] + Point(wg_width,0)
      pt3=pts[0] + Point(-wg_width,0)
      
    t = Trans(angle, False, pts[0]) 
    text = Text ('Lumerical_INTERCONNECT_library=Design kits/ebeam', t, 0.1/dbu, -1)
    text.halign=halign
    shape = self.cell.shapes(LayerDevRecN).insert(text)
    t = Trans(angle, False, pt2)
    text = Text ('Component=ebeam_wg_integral_1550', t, 0.1/dbu, -1)
    text.halign=halign
    shape = self.cell.shapes(LayerDevRecN).insert(text)
    t = Trans(angle, False, pt3)
    pts_txt = str([ [round(p.to_dtype(dbu).x,3), round(p.to_dtype(dbu).y,3)] for p in pts ]).replace(', ',',')
    text = Text ( \
      'Spice_param:wg_length=%.3fu wg_width=%.3fu points="%s" radius=%s' %\
        (waveguide_length, self.width, pts_txt,self.radius ), t, 0.1/dbu, -1  )
    text.halign=halign
    shape = self.cell.shapes(LayerDevRecN).insert(text)


class SiEPIC_EBeam_Positive(Library):
  """
  The library where we will put the PCells and GDS into 
  """

  def __init__(self):
  
    tech_name = 'EBeam_Positive'
    library = tech_name
#    library = 'SiEPIC-'+tech_name
    
    print("Initializing '%s' Library." % library)


    # Set the description
# windows only allows for a fixed width, short description 
    self.description = ""
# OSX does a resizing:
    self.description = "Components &amp; models"


#    technology = 'SiEPIC-EBeam'
    print("Initializing '%s' Library." % library)
  
    import os
    print(" reading: %s" % os.path.join(os.path.dirname(os.path.realpath(__file__)), "SiEPIC_EBeam_Positive.gds"))
    self.layout().read(os.path.join(os.path.dirname(os.path.realpath(__file__)), "SiEPIC_EBeam_Positive.gds"))
#    [self.layout().rename_cell(i, self.layout().cell_name(i).replace('_', ' ')) for i in range(0, self.layout().cells())]
    
    
    # Create the PCell declarations

    self.layout().register_pcell("Waveguide", Waveguide())

    # Register us the library with the technology name
    # If a library with that name already existed, it will be replaced then.
    self.register(library)

#    self.register('SiEPIC-EBeam')

    if int(Application.instance().version().split('.')[1]) &gt; 24:
      # KLayout v0.25 introduced technology variable:
      self.technology=tech_name
 
# Instantiate and register the library
SiEPIC_EBeam_Positive()



</text>
</klayout-macro>
